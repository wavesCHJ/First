#正则表达式

"""
在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：

'00\d'可以匹配'007'，但无法匹配'00A'；

'\d\d\d'可以匹配'010'；

'\w\w\d'可以匹配'py3'；

.可以匹配任意字符，所以：

'py.'可以匹配'pyc'、'pyo'、'py!'等等。
要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

来看一个复杂的例子：\d{3}\s+\d{3,8}。

我们来从左到右解读一下：

\d{3}表示匹配3个数字，例如'010'；

\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；

\d{3,8}表示3-8个数字，例如'1234567'。

综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。

如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。

"""
#具体正则表达式规则百度

#Python提供re模块，包含所有正则表达式的功能。
#由于Python的字符串本身也用\转义，所以要特别注意：
s = 'ABC\\-001'
print(s)
#因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：
s = r'ABC\-001'
print(s)


import re
#匹配 3个数字 - 3到8个数字
res = re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
print(res)
res = re.match(r'^\d{3}\-\d{3,8}$', '01012345')
print(res)
    #^为匹配输入字符串的开始位置，$为匹配输入字符串的结尾位置
#match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。
#常见的判断方法就是：
"""
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')
"""

#切分字符串
#用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：
print('a b  c'.split(' '))
#嗯，无法识别连续的空格，用正则表达式试试：
l = re.split(r'\s+', 'a b  c')
print(l)
#无论多少个空格都可以正常分割。加入,和;试试：
l = re.split(r'[\s\,\;]+', 'a,b , , c   d ; e')
print(l)
#如果用户输入了一组标签，可以用正则表达式来把不规范的输入转化成正确的数组。







#分组
#除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。
#用()表示的就是要提取的分组（Group）。比如：

#^(\d{3})-(\d{3,8})$分别定义了两个组，
#可以直接从匹配的字符串中提取出区号和本地号码：
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(0))
print(m.group(1))
print(m.group(2))
#如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。
#注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。


#提取子串非常有用。来看一个更凶残的例子：
t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print(m.groups())
#识别合法时间



#贪婪匹配
#正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
m = re.match(r'^(\d+)(0*)$', '102300')
print(m.groups())
#由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

#必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，
#加个?就可以让\d+采用非贪婪匹配：
m = re.match(r'^(\d+?)(0*)$', '102300')
print(m.groups())




#编译
"""
当我们在Python中使用正则表达式时，re模块内部会干两件事情：
    1.编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
    2.用编译后的正则表达式去匹配字符串。
"""
#如果一个正则表达式要重复使用几千次，出于效率的考虑，
#我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，
#直接匹配：
#编译：
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
#使用
print(re_telephone.match('010-12345').groups())

print(re_telephone.match('010-8086').groups())





#practice 
#请尝试写一个验证Email地址的正则表达式。可以验证出类似的Email：
def is_valid_email(addr):
    return re.match(r'^\w+\.?\w+@\w+\.com$', addr) 
    #.匹配除换行符（\n、\r）之外的任何单个字符
    #所以要匹配小数点. 需要加\ 即\.

assert is_valid_email('someone@gmail.com')
assert is_valid_email('bill.gates@microsoft.com')
assert not is_valid_email('bob#example.com')
assert not is_valid_email('mr-bob@example.com')
print('ok')


#写正则表达式时最好加上^和$位置符，不然会出意外
if (re.match(r'^[\w+.]*$', 'd-.-d')):
    print('???')
if (re.match(r'[\w+.]*', 'd-.-d')):
    print('!!!') 

 























